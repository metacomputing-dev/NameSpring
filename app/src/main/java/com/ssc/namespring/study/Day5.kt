// study/Day5.kt
package com.ssc.namespring.study

class Day5 {
    // 5. MVC 기초 강의 간단하게
    
    // MVC 개론적인 설명 간단히
    // Model, View, Control로 분류하는 것
    // "관심사를 분리."
    // Model: 비즈니스 로직
    // View: UI
    // Control: 두 모듈의 중재자
    // Why MVC?
    // "유지보수"가 쉬워진다. 개발속도, 가독성, 유지보수 .. 모든 면에 있어서 많은 장점이 있더라.

    // 같은 철학을 가지고 파생되는 패턴들이 우후죽순 나타나기 시작함.
    // Why? 시스템 구축 환경이 제각기 달라서 여러가지 환경에 맞게 개발자들은 그 철학을 녹이기 시작함.
    // ECB
    // MVP
    // MVVM (안드로이드)
    // .. 
    // 패턴들이 있음.
    // 이런 패턴들 중에서 어떤것을 사용할지는 내 현재 프로젝트의 속성, 환경에 따라 적절히 잘 선택하자.
    // MVC -> MVP -> MVVM 만들어진 역사는 이런데, 그걸 마치 더 좋은 패턴이다 라고 하는건 잘못된 생각임. (진화론적으로 다가가야함)
    // 결론적으로는 중심이 되는 철학만 끌고가면 됨.


    // 6. C.D. 
    // - 대강 그림으로만 하고 끝낼거임. 왜냐하면 여기에 시간 투자할 겨를이 없음.
    // - CD는 원래 사실 하다보면 자꾸 바뀜.. 특히 개발 초기에는.. 나중에 고도화되면서 점점 굳혀짐. 그때가서 코딩이 어느정도 완료되어가는 시점에서 만들어도 OK
    // - Why?
    //   - 초기에 CD를 먼저 상을 띄워놓으면, 코딩할때 그림을 머릿속에 상상하게 되면서 코딩 속도가 빨라지고, 
    //     - 무작정 짜면 예상하지 못한 구조적 문제를 겪게됨.. 그래서 코드의 변화(짰다가 지웠다가 하는 바보같은 반복 행위들)가 많아짐.
    //     - 근데 CD를 자꾸 그리는 경험이 많아지다보면 그리지 않아도 머릿속에 도화지가 생겨버림. 나중엔 안그림.(=사실은 원래 그리는건데 머리속으로 그리게 됨)

    // 7. View 짜기!
    // Model은 짰으니까 View를 짜자.
    //
    // MVC 철학에서는 Model -> View -> Control 순으로 실제 구현함
    // Model -> 비즈니스 로직이 구체화됨
    // View -> 비즈니스가 명확해졌기 때문에 어떤 UI 요소가 나타날 지가 알게 됨. 그래서 View 를 짬
    // Control -> 두 나머지 연결 대상이 구체화 되었기 때문에 가장 나중에 짬.
    //
    // BFS
    // 각 액티비티 레이아웃과 전환연결만 우선 구현하자.
    // 그리고 각 액티비티를 DFS로 채워넣자!

    // API SDK 둘 중 하나만. API 같은 글자를 직접 붙이진 않음.
    // namingengine/main/java/com/ssc/namingengine/NamingEngine.kt
    // json 파일은 namingengine 내부 resources에 담아두고 활용하기로 결정(안드로이드 assets과 독립시킴).
    // 테스트코드들을 포로덕션 코드 밖으로 떼어내기.
    // json 한자 미포함 이슈 해결
}
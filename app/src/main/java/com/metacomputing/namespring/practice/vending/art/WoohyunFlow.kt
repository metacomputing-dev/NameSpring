package com.metacomputing.namespring.practice.vending.art

class WoohyunFlow {
    // 일단.. 자판기는 돈관리가 중요하니까 "돈관리" 책임을 담당할 클래스가 필요할것 같다.
    // class 돈관리매니저: 돈과 관련된 연산만 오로지 수행하는 매니저.
    // 상태와 행동?: 상태는 금액, 행동은 add(돈), subtract(돈)가 있겠다. (뭐, 여담으로 checkValidation(): 진짜 돈인가? 가짜돈인가? 뭐 이런 확장도 가능하겠다.)

    // 자판기 "물건관리" 책임을 담당할 클래스도 필요할 것 같다. 왜냐면 돈관리는 이미 했고, 그 돈액수에 맞는 사용자가 원하는 물건을 주거나, 자판기 주인이 물건을 넣을 수 있으니까.
    // 그리고 무슨 물건을 넣을지는 난 모르겠다. 자판기는 그리드 형태이니 2차원 셀로 상상해보자.
    // class 물건매니저: 물건 관리 담당만 하는 매니저
    // 상태와 행동?: 상태는 그리드에 배치된 물건과 물건의 스택 수, 행동은 add(물건), subtract(물건)이 있겠다.

    // 이 두개정도면 일단 최상위 벤딩머신 클래스가 이제 대강 구현할수 있겠다.
    // class 벤딩머신: 사용자 및 주인(관리자)에 의해 수동 제어되고 동작을 지원할 수 있겠다.
    // 상태: 물건관리자, 돈관리자
    // 행동: 주문하기는 order(그리드 좌표), 자판기의 정보창은 display(), 돈뱉기는 returnChange()
}
package com.metacomputing.namespring.model.data

import android.annotation.SuppressLint
import android.content.Context
import androidx.annotation.StringDef
import com.metacomputing.namespring.utils.emptyIfUnderscore
import com.metacomputing.namespring.utils.getHanjaAt
import java.util.Calendar
import java.util.Locale
import java.util.UUID

data class Profile(
    var title: String,
    var locale: Locale,
    var birthDate: Calendar,
    @param:Gender var gender: String,
    var firstName: String,
    var firstNameHanja: String,
    var familyName: String,
    var familyNameHanja: String,
    val id: String = UUID.randomUUID().toString()
    ) {
    companion object {
        @StringDef(Gender.MALE, Gender.FEMALE)
        @Retention(AnnotationRetention.SOURCE)
        annotation class Gender {
            companion object {
                const val MALE = "남"
                const val FEMALE = "여"
            }
        }

        fun new(context: Context,
                title: String = "New Profile",
                birthDate: Calendar = Calendar.getInstance(),
                @Gender gender: String = Gender.MALE,
                firstName: String = "",
                firstNameHanja: String = "",
                familyName: String = "",
                familyNameHanja: String = ""
        ): Profile {
            val loc = context.resources.configuration.locales.get(0)
            return Profile(title, loc, birthDate, gender, firstName, firstNameHanja, familyName, familyNameHanja)
        }
    }

    // Sugar syntax
    val fullName: String
        get() = familyName + firstName
    val fullNameHanja: String
        get() = familyNameHanja + firstNameHanja

    val fullNamePrettyString: String
        get() = familyName.emptyIfUnderscore() + firstName.emptyIfUnderscore()

    val fullNameHanjaPrettyString: String
        get() = familyNameHanja.emptyIfUnderscore() + firstNameHanja.emptyIfUnderscore()

    val birthAsString: String
        get() {
            return birthDate.run {
                "" + get(Calendar.YEAR) + "." + get(Calendar.MONTH) + "." + get(Calendar.DAY_OF_MONTH) + "."
            }
        }

    val birthAsPrettyString: String
        @SuppressLint("DefaultLocale")
        get() {
            return birthDate.run {
                String.format("%d년 %d월 %d일, %d시 %d분",
                    get(Calendar.YEAR), get(Calendar.MONTH), get(Calendar.DAY_OF_MONTH), get(Calendar.HOUR_OF_DAY), get(Calendar.MINUTE))
            }
        }

    fun getBirthDateOf(fieldOfCalendar: Int): Int? {
        return birthDate.get(fieldOfCalendar)
    }

    fun buildNamingQuery(): String {
        var ret = ""
        fullName.forEachIndexed { index, letter ->
            ret += "[$letter/${fullNameHanja.getHanjaAt(index)}]"
        }
        return ret
    }

    fun clone(): Profile {
        return Profile(
            title, locale, birthDate, gender,
            firstName, firstNameHanja, familyName, familyNameHanja)
    }

    override fun toString(): String {
        return "Profile{ id=${id}, title=${title}, locale=${locale}, birthDate=${birthAsString}, " +
                "gender=${gender}, firstName=${firstName}, firstNameHanja=${firstNameHanja}, " +
                "familyName=${familyName}, familyNameHanja=${familyNameHanja} }"
    }

    private val dataAsArray
        get() = arrayListOf(title, birthAsString, gender, firstName, firstNameHanja, familyName, familyNameHanja)

    override fun equals(other: Any?): Boolean {
        (other as? Profile)?.let {
            dataAsArray.forEachIndexed { index, d ->
                if (it.dataAsArray[index] != d) {
                    return false
                }
            }
            return true
        }
        return false
    }

    // auto generated by IDE
    override fun hashCode(): Int {
        var result = title.hashCode()
        result = 31 * result + locale.hashCode()
        result = 31 * result + birthDate.hashCode()
        result = 31 * result + gender.hashCode()
        result = 31 * result + firstName.hashCode()
        result = 31 * result + firstNameHanja.hashCode()
        result = 31 * result + familyName.hashCode()
        result = 31 * result + familyNameHanja.hashCode()
        result = 31 * result + id.hashCode()
        result = 31 * result + fullName.hashCode()
        result = 31 * result + fullNameHanja.hashCode()
        result = 31 * result + fullNamePrettyString.hashCode()
        result = 31 * result + fullNameHanjaPrettyString.hashCode()
        result = 31 * result + birthAsString.hashCode()
        result = 31 * result + birthAsPrettyString.hashCode()
        result = 31 * result + dataAsArray.hashCode()
        return result
    }
}